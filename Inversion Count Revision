public class Solution {

    int mod=1000*1000*1000+7;
    public int solve(ArrayList<Integer> A) {
        return divide(A,0,A.size()-1);
    }

    private int divide(ArrayList<Integer> A, int l, int r){

        if(l==r){
            return 0;
        }
        int mid = l+(r-l)/2;

        long left = divide(A,l,mid);
        long right = divide(A,mid+1,r);
        long merge = merge(A,l,mid,r);

        return (int)(left+right+merge)%mod;
    }

    private int merge(ArrayList<Integer> A, int l, int mid, int r){

        int left = l;
        int right = mid+1;
        ArrayList<Integer> temp = new ArrayList<>();
        int count=0;
        while(left<=mid && right<=r){
            if(A.get(left)<=A.get(right)){
                temp.add(A.get(left));
                left++;
            }else{
                count+=mid-left+1;
                count%=mod;
                temp.add(A.get(right));
                right++;
            }
        }

        while(left<=mid){
            temp.add(A.get(left));
            left++;
        }

        while(right<=r){
            temp.add(A.get(right));
            right++;
        }

        for(int i=l;i<=r;i++){
            A.set(i,temp.get(i-l));
        }

        return count;
    }
}
